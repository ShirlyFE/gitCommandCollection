1. git配置
    git config --global user.name "robbin"   
    git config --global user.email "fankai@gmail.com"
    git config --global color.ui true
    git config --global alias.co checkout
    git config --global alias.ci commit
    git config --global alias.st status
    git config --global alias.br branch
    Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：

$ git config --global core.editor emacs
    git config --global core.editor "mate -w"    # 设置Editor使用textmate
    用户的git配置文件~/.gitconfig


2. git常用命令  
    查看、添加、提交、删除、找回，重置修改文件
    git help <command>  # 显示command的help
    git show            # 显示某次提交的内容
    git show $id
    git co  -- <file>   # 抛弃工作区修改
    git co  .           # 抛弃工作区修改
    git add <file>      # 将工作文件修改提交到本地暂存区
    git add .           # 将所有修改过的工作文件提交暂存区
    git rm <file>       # 从版本库中删除文件
    git rm <file> --cached  # 从版本库中删除文件，但不删除文件
    git reset <file>    # 从暂存区恢复到工作文件
    git reset -- .      # 从暂存区恢复到工作文件
    git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
    git ci <file>
    git ci .
    git ci -a           # 将git add, git rm和git ci等操作都合并在一起做
    git ci -am "some comments"
    git ci --amend      # 修改最后一次提交记录

    git revert <$id>    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象
    git revert HEAD     # 恢复最后一次提交的状态


2. 建立本地分支并与远程对应分支关联：
    git checkout -b localBranch origin/localBranch


    当然：在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 --track 选项简化：

    $ git checkout --track origin/serverfix
    Branch serverfix set up to track remote branch serverfix from origin.
    Switched to a new branch 'serverfix'


    要为本地分支设定不同于远程分支的名字，只需在第一个版本的命令里换个名字：

    $ git checkout -b sf origin/serverfix
    Branch sf set up to track remote branch serverfix from origin.
    Switched to a new branch 'sf'



3. 删除远程分支：
    如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：

    $ git push origin :serverfix
    To git@github.com:schacon/simplegit.git
     - [deleted]         serverfix
    咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。


4. 推送本地分支
    要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。

    如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git push (远程仓库名) (分支名)：

    $ git push origin serverfix
    Counting objects: 20, done.
    Compressing objects: 100% (14/14), done.
    Writing objects: 100% (15/15), 1.74 KiB, done.
    Total 15 (delta 5), reused 0 (delta 0)
    To git@github.com:schacon/simplegit.git
     * [new branch]      serverfix -> serverfix

    这里其实走了一点捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serverfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。


5. 查看文件diff

    git diff <file>     # 比较当前文件和暂存区文件差异
    git diff
    git diff <$id1> <$id2>   # 比较两次提交之间的差异
    git diff <branch1>..<branch2> # 在两个分支之间比较 
    git diff --staged   # 比较暂存区和版本库差异
    git diff --cached   # 比较暂存区和版本库差异
    git diff --stat     # 仅仅比较统计信息

    常见的diff用法是比较工作区，index，HEAD或者是diff两个提交。除了这些用法之外diff还可以比较2个分支，用法如下：
    git diff topic master     (1)
    git diff topic..master    (2)
    git diff topic...master   (3)

    用法1，直接跟两个使用空格分隔的分支名会直接将两个分支上最新的提交做diff，相当于diff了两个commit。
    用法2，用两个点号分隔的分支名，作用同用法1(装酷利器)
    用法3，用三个点号分隔的分支名会输出自topic与master分别开发以来，master分支上的change。

6. 查看提交记录

    git log
    git log <file>      # 查看该文件每次提交记录
    git log -p <file>   # 查看每次详细修改内容的diff
    git log -p -2       # 查看最近两次详细修改内容的diff



Git 本地分支管理
    查看、切换、创建和删除分支
    git br -r           # 查看远程分支
    git br <new_branch> # 创建新的分支
    git br -v           # 查看各个分支最后提交信息
    git br --merged     # 查看已经被合并到当前分支的分支
    git br --no-merged  # 查看尚未被合并到当前分支的分支
    git co <branch>     # 切换到某个分支
    git co -b <new_branch> # 创建新的分支，并且切换过去
    git co -b <new_branch> <branch>  # 基于branch创建新的new_branch
    git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
    git co $id -b <new_branch>  # 把某次历史提交记录checkout出来，创建成一个分支
    git br -d <branch>  # 删除某个分支
    git br -D <branch>  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)

分支合并和rebase

    git merge <branch>               # 将branch分支合并到当前分支
    git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交
    git rebase master <branch>       # 将master rebase到branch，相当于：
    git co <branch> && git rebase master && git co master && git merge <branch>


Git补丁管理(方便在多台机器上开发同步时用)
    git diff > ../sync.patch         # 生成补丁
    git apply ../sync.patch          # 打补丁
    git apply --check ../sync.patch  # 测试补丁能否成功


Git暂存管理
    git stash                        # 暂存
    git stash list                   # 列所有stash
    git stash apply                  # 恢复暂存的内容
    git stash drop                   # 删除暂存区


Git远程分支管理
    git pull                         # 抓取远程仓库所有分支更新并合并到本地
    git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
    git fetch origin                 # 抓取远程仓库更新
    git merge origin/master          # 将远程主分支合并到本地当前分支
    git co --track origin/branch     # 跟踪某个远程分支创建相应的本地分支
    git co -b <local_branch> origin/<remote_branch>  # 基于远程分支创建本地分支，功能同上

    git push                         # push所有分支
    git push origin master           # 将本地主分支推到远程主分支
    git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
    git push origin <local_branch>   # 创建远程分支， origin是远程仓库名
    git push origin <local_branch>:<remote_branch>  # 创建远程分支
    git push origin :<remote_branch>  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支


Git远程仓库管理
    git remote -v                    # 查看远程服务器地址和仓库名称
    git remote show origin           # 查看远程服务器仓库状态
    git remote add origin git@github:robbin/robbin_site.git         # 添加远程仓库地址
    git remote set-url origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)
    git remote rm <repository>       # 删除远程仓库

    
创建远程仓库
    git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库
    scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上
    mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库
    git remote add origin git@github.com:robbin/robbin_site.git    # 设置远程仓库地址
    git push -u origin master                                      # 客户端首次提交
    git push -u origin develop  # 首次将本地develop分支提交到远程develop分支，并且track
    git remote set-head origin master   # 设置远程仓库的HEAD指向master分支
    也可以命令设置跟踪远程库和本地库
    git branch --set-upstream master origin/master
    git branch --set-upstream develop origin/develop